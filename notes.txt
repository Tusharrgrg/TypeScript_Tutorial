TypeScript 
- It is a superset of javaScript so which means any any valid javaScript code is also a valid TypeScript code.
- It is developed by microsoft in 2012 and now it a open source project which have large community of contributers.
- Javascript is a dynamically typed language but typescript is strongly language.
- Explicitly define datatype.
- Easiar to write code.
- Easiar to maintain.
- Its provide interface, classes, Touple.etc.
- TypeScript catches errors in compile time rather than run time its make Easiar to catch bugs.
-
---

Types-
- in typescript type anotations is way to explicitly specifying the type of the variable or a function parameter
or function return value.
- it helps the typescript compiler to enforce the type checking and provide type safety during the developement.
Number => it targets all the numbers including integer, float, etc.
String => include all the text data.
Boolean => taking true & false
- In TypeScript, you work with types like string or number all the times.
- Important: It is string and number (etc.), NOT String, Number etc.
- The core primitive types in TypeScript are all lowercase!
Objects => any javascript object

-Of course object types can also be created for nested objects.
-Let's say you have this JavaScript object:

const product = {
  id: 'abc1',
  price: 12.99,
  tags: ['great-offer', 'hot-and-new'],
  details: {
    title: 'Red Carpet',
    description: 'A great carpet - almost brand-new!'
  }
}
This would be the type of such an object:
{
  id: string;
  price: number;
  tags: string[];
  details: {
    title: string;
    description: string;
  }
}

Touple => fixed length and fixed datatype 

*️⃣ Type Alias 💀
- In Type script we can create our own type Alias
like -> type combine = number | string .

Type aliases can be used to "create" your own types. You're not limited to storing union types though - you can also provide an alias to a (possibly complex) object type.

For example:

```type User = { name: string; age: number };
const u1: User = { name: 'Max', age: 30 }; // this works!
This allows you to avoid unnecessary repetition and manage types centrally.
For example, you can simplify this code:
function greet(user: { name: string; age: number }) {
  console.log('Hi, I am ' + user.name);
}
function isOlder(user: { name: string; age: number }, checkAge: number) {
  return checkAge > user.age;
}
To:

type User = { name: string; age: number };

function greet(user: User) {
  console.log('Hi, I am ' + user.name);
}
function isOlder(user: User, checkAge: number) {
  return checkAge > user.age;
}```